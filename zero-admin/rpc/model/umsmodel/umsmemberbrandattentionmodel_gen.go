// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberBrandAttentionFieldNames          = builder.RawFieldNames(&UmsMemberBrandAttention{})
	umsMemberBrandAttentionRows                = strings.Join(umsMemberBrandAttentionFieldNames, ",")
	umsMemberBrandAttentionRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberBrandAttentionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberBrandAttentionRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberBrandAttentionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	umsMemberBrandAttentionModel interface {
		Insert(ctx context.Context, data *UmsMemberBrandAttention) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberBrandAttention, error)
		Update(ctx context.Context, data *UmsMemberBrandAttention) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsMemberBrandAttentionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UmsMemberBrandAttention struct {
		Id             int64          `db:"id"`
		MemberId       int64          `db:"member_id"`        // 会员id
		MemberNickName string         `db:"member_nick_name"` // 会员姓名
		MemberIcon     string         `db:"member_icon"`      // 会员头像
		BrandId        int64          `db:"brand_id"`         // 品牌id
		BrandName      string         `db:"brand_name"`       // 品牌名称
		BrandLogo      string         `db:"brand_logo"`       // 品牌Logo
		BrandCity      sql.NullString `db:"brand_city"`       // 品牌所在城市
		CreateTime     time.Time      `db:"create_time"`      // 关注时间
	}
)

func newUmsMemberBrandAttentionModel(conn sqlx.SqlConn) *defaultUmsMemberBrandAttentionModel {
	return &defaultUmsMemberBrandAttentionModel{
		conn:  conn,
		table: "`ums_member_brand_attention`",
	}
}

func (m *defaultUmsMemberBrandAttentionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUmsMemberBrandAttentionModel) FindOne(ctx context.Context, id int64) (*UmsMemberBrandAttention, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberBrandAttentionRows, m.table)
	var resp UmsMemberBrandAttention
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberBrandAttentionModel) Insert(ctx context.Context, data *UmsMemberBrandAttention) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberBrandAttentionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.MemberNickName, data.MemberIcon, data.BrandId, data.BrandName, data.BrandLogo, data.BrandCity)
	return ret, err
}

func (m *defaultUmsMemberBrandAttentionModel) Update(ctx context.Context, data *UmsMemberBrandAttention) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberBrandAttentionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.MemberNickName, data.MemberIcon, data.BrandId, data.BrandName, data.BrandLogo, data.BrandCity, data.Id)
	return err
}

func (m *defaultUmsMemberBrandAttentionModel) tableName() string {
	return m.table
}
