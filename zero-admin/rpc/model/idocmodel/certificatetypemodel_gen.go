// Code generated by goctl. DO NOT EDIT.

package hridoc

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	certificateTypeFieldNames          = builder.RawFieldNames(&CertificateType{})
	certificateTypeRows                = strings.Join(certificateTypeFieldNames, ",")
	certificateTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(certificateTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	certificateTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(certificateTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCertificateTypeIdPrefix = "cache:certificateType:id:"
)

type (
	certificateTypeModel interface {
		Insert(ctx context.Context, data *CertificateType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CertificateType, error)
		Update(ctx context.Context, data *CertificateType) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCertificateTypeModel struct {
		sqlc.CachedConn
		table string
	}

	CertificateType struct {
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
		Id        int64        `db:"id"`   // 分类ID
		Name      string       `db:"name"` // 分类名称
	}
)

func newCertificateTypeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCertificateTypeModel {
	return &defaultCertificateTypeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`certificate_type`",
	}
}

func (m *defaultCertificateTypeModel) withSession(session sqlx.Session) *defaultCertificateTypeModel {
	return &defaultCertificateTypeModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`certificate_type`",
	}
}

func (m *defaultCertificateTypeModel) Delete(ctx context.Context, id int64) error {
	certificateTypeIdKey := fmt.Sprintf("%s%v", cacheCertificateTypeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, certificateTypeIdKey)
	return err
}

func (m *defaultCertificateTypeModel) FindOne(ctx context.Context, id int64) (*CertificateType, error) {
	certificateTypeIdKey := fmt.Sprintf("%s%v", cacheCertificateTypeIdPrefix, id)
	var resp CertificateType
	err := m.QueryRowCtx(ctx, &resp, certificateTypeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", certificateTypeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCertificateTypeModel) Insert(ctx context.Context, data *CertificateType) (sql.Result, error) {
	certificateTypeIdKey := fmt.Sprintf("%s%v", cacheCertificateTypeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, certificateTypeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.Name)
	}, certificateTypeIdKey)
	return ret, err
}

func (m *defaultCertificateTypeModel) Update(ctx context.Context, data *CertificateType) error {
	certificateTypeIdKey := fmt.Sprintf("%s%v", cacheCertificateTypeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, certificateTypeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.Name, data.Id)
	}, certificateTypeIdKey)
	return err
}

func (m *defaultCertificateTypeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCertificateTypeIdPrefix, primary)
}

func (m *defaultCertificateTypeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", certificateTypeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCertificateTypeModel) tableName() string {
	return m.table
}
