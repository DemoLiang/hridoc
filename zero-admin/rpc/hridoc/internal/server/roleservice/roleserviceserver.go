// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package server

import (
	"context"

	"zero-admin/rpc/hridoc/internal/logic/roleservice"
	"zero-admin/rpc/hridoc/internal/svc"
	"zero-admin/rpc/proto/sys"
)

type RoleServiceServer struct {
	svcCtx *svc.ServiceContext
	sys.UnimplementedRoleServiceServer
}

func NewRoleServiceServer(svcCtx *svc.ServiceContext) *RoleServiceServer {
	return &RoleServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *RoleServiceServer) RoleAdd(ctx context.Context, in *sys.RoleAddReq) (*sys.RoleAddResp, error) {
	l := roleservicelogic.NewRoleAddLogic(ctx, s.svcCtx)
	return l.RoleAdd(in)
}

func (s *RoleServiceServer) RoleList(ctx context.Context, in *sys.RoleListReq) (*sys.RoleListResp, error) {
	l := roleservicelogic.NewRoleListLogic(ctx, s.svcCtx)
	return l.RoleList(in)
}

func (s *RoleServiceServer) RoleUpdate(ctx context.Context, in *sys.RoleUpdateReq) (*sys.RoleUpdateResp, error) {
	l := roleservicelogic.NewRoleUpdateLogic(ctx, s.svcCtx)
	return l.RoleUpdate(in)
}

func (s *RoleServiceServer) RoleDelete(ctx context.Context, in *sys.RoleDeleteReq) (*sys.RoleDeleteResp, error) {
	l := roleservicelogic.NewRoleDeleteLogic(ctx, s.svcCtx)
	return l.RoleDelete(in)
}

func (s *RoleServiceServer) QueryMenuByRoleId(ctx context.Context, in *sys.QueryMenuByRoleIdReq) (*sys.QueryMenuByRoleIdResp, error) {
	l := roleservicelogic.NewQueryMenuByRoleIdLogic(ctx, s.svcCtx)
	return l.QueryMenuByRoleId(in)
}

func (s *RoleServiceServer) UpdateMenuRole(ctx context.Context, in *sys.UpdateMenuRoleReq) (*sys.UpdateMenuRoleResp, error) {
	l := roleservicelogic.NewUpdateMenuRoleLogic(ctx, s.svcCtx)
	return l.UpdateMenuRole(in)
}
