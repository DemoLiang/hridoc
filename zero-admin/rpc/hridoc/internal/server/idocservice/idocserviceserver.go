// Code generated by goctl. DO NOT EDIT.
// Source: idoc.proto

package server

import (
	"context"
	"zero-admin/rpc/hridoc/internal/logic/idocservice"
	"zero-admin/rpc/proto/idoc"

	"zero-admin/rpc/hridoc/internal/svc"
)

type IdocServiceServer struct {
	svcCtx *svc.ServiceContext
	idoc.UnimplementedIdocServiceServer
}

func NewIdocServiceServer(svcCtx *svc.ServiceContext) *IdocServiceServer {
	return &IdocServiceServer{
		svcCtx: svcCtx,
	}
}

// CertificateAdd 证书添加
func (s *IdocServiceServer) CertificateAdd(ctx context.Context, in *idoc.CertificateAddReq) (*idoc.CertificateAddResp, error) {
	l := idocservicelogic.NewCertificateAddLogic(ctx, s.svcCtx)
	return l.CertificateAdd(in)
}

// CertificateList 证书列表
func (s *IdocServiceServer) CertificateList(ctx context.Context, in *idoc.CertificateListReq) (*idoc.CertificateListResp, error) {
	l := idocservicelogic.NewCertificateListLogic(ctx, s.svcCtx)
	return l.CertificateList(in)
}

// CertificateUpdate 证书更新
func (s *IdocServiceServer) CertificateUpdate(ctx context.Context, in *idoc.CertificateUpdateReq) (*idoc.CertificateUpdateResp, error) {
	l := idocservicelogic.NewCertificateUpdateLogic(ctx, s.svcCtx)
	return l.CertificateUpdate(in)
}

// CertificateDelete 证书删除
func (s *IdocServiceServer) CertificateDelete(ctx context.Context, in *idoc.CertificateDeleteReq) (*idoc.CertificateDeleteResp, error) {
	l := idocservicelogic.NewCertificateDeleteLogic(ctx, s.svcCtx)
	return l.CertificateDelete(in)
}

// CertificateCategoryAdd 证书类别增加
func (s *IdocServiceServer) CertificateCategoryAdd(ctx context.Context, in *idoc.CertificateCategoryReq) (*idoc.CertificateCategoryResp, error) {
	l := idocservicelogic.NewCertificateCategoryAddLogic(ctx, s.svcCtx)
	return l.CertificateCategoryAdd(in)
}

// CertificateCategoryList 证书类别列表
func (s *IdocServiceServer) CertificateCategoryList(ctx context.Context, in *idoc.CertificateCategoryListReq) (*idoc.CertificateCategoryListResp, error) {
	l := idocservicelogic.NewCertificateCategoryListLogic(ctx, s.svcCtx)
	return l.CertificateCategoryList(in)
}

// CertificateCategoryUpdate 证书类别更新
func (s *IdocServiceServer) CertificateCategoryUpdate(ctx context.Context, in *idoc.CertificateCategoryUpdateReq) (*idoc.CertificateCategoryUpdateResp, error) {
	l := idocservicelogic.NewCertificateCategoryUpdateLogic(ctx, s.svcCtx)
	return l.CertificateCategoryUpdate(in)
}

// CertificateCategoryDelete 证书类别删除
func (s *IdocServiceServer) CertificateCategoryDelete(ctx context.Context, in *idoc.CertificateCategoryDeleteReq) (*idoc.CertificateCategoryDeleteResp, error) {
	l := idocservicelogic.NewCertificateCategoryDeleteLogic(ctx, s.svcCtx)
	return l.CertificateCategoryDelete(in)
}
