// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package server

import (
	"context"

	"zero-admin/rpc/hridoc/internal/logic/configservice"
	"zero-admin/rpc/hridoc/internal/svc"
	"zero-admin/rpc/proto/sys"
)

type ConfigServiceServer struct {
	svcCtx *svc.ServiceContext
	sys.UnimplementedConfigServiceServer
}

func NewConfigServiceServer(svcCtx *svc.ServiceContext) *ConfigServiceServer {
	return &ConfigServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *ConfigServiceServer) ConfigAdd(ctx context.Context, in *sys.ConfigAddReq) (*sys.ConfigAddResp, error) {
	l := configservicelogic.NewConfigAddLogic(ctx, s.svcCtx)
	return l.ConfigAdd(in)
}

func (s *ConfigServiceServer) ConfigList(ctx context.Context, in *sys.ConfigListReq) (*sys.ConfigListResp, error) {
	l := configservicelogic.NewConfigListLogic(ctx, s.svcCtx)
	return l.ConfigList(in)
}

func (s *ConfigServiceServer) ConfigUpdate(ctx context.Context, in *sys.ConfigUpdateReq) (*sys.ConfigUpdateResp, error) {
	l := configservicelogic.NewConfigUpdateLogic(ctx, s.svcCtx)
	return l.ConfigUpdate(in)
}

func (s *ConfigServiceServer) ConfigDelete(ctx context.Context, in *sys.ConfigDeleteReq) (*sys.ConfigDeleteResp, error) {
	l := configservicelogic.NewConfigDeleteLogic(ctx, s.svcCtx)
	return l.ConfigDelete(in)
}

func (s *ConfigServiceServer) UpdateConfigRole(ctx context.Context, in *sys.UpdateConfigRoleReq) (*sys.UpdateConfigRoleResp, error) {
	l := configservicelogic.NewUpdateConfigRoleLogic(ctx, s.svcCtx)
	return l.UpdateConfigRole(in)
}
