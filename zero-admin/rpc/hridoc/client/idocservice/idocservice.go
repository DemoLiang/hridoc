// Code generated by goctl. DO NOT EDIT.
// Source: idoc.proto

package idocservice

import (
	"context"
	"zero-admin/rpc/proto/idoc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CertificateAddReq             = idoc.CertificateAddReq
	CertificateAddResp            = idoc.CertificateAddResp
	CertificateCategoryDeleteReq  = idoc.CertificateCategoryDeleteReq
	CertificateCategoryDeleteResp = idoc.CertificateCategoryDeleteResp
	CertificateCategoryListData   = idoc.CertificateCategoryListData
	CertificateCategoryListReq    = idoc.CertificateCategoryListReq
	CertificateCategoryListResp   = idoc.CertificateCategoryListResp
	CertificateCategoryReq        = idoc.CertificateCategoryReq
	CertificateCategoryResp       = idoc.CertificateCategoryResp
	CertificateCategoryUpdateReq  = idoc.CertificateCategoryUpdateReq
	CertificateCategoryUpdateResp = idoc.CertificateCategoryUpdateResp
	CertificateDeleteReq          = idoc.CertificateDeleteReq
	CertificateDeleteResp         = idoc.CertificateDeleteResp
	CertificateListData           = idoc.CertificateListData
	CertificateListReq            = idoc.CertificateListReq
	CertificateListResp           = idoc.CertificateListResp
	CertificateUpdateReq          = idoc.CertificateUpdateReq
	CertificateUpdateResp         = idoc.CertificateUpdateResp

	IdocService interface {
		// CertificateAdd 证书添加
		CertificateAdd(ctx context.Context, in *CertificateAddReq, opts ...grpc.CallOption) (*CertificateAddResp, error)
		// CertificateList 证书列表
		CertificateList(ctx context.Context, in *CertificateListReq, opts ...grpc.CallOption) (*CertificateListResp, error)
		// CertificateUpdate 证书更新
		CertificateUpdate(ctx context.Context, in *CertificateUpdateReq, opts ...grpc.CallOption) (*CertificateUpdateResp, error)
		// CertificateDelete 证书删除
		CertificateDelete(ctx context.Context, in *CertificateDeleteReq, opts ...grpc.CallOption) (*CertificateDeleteResp, error)
		// CertificateCategoryAdd 证书类别增加
		CertificateCategoryAdd(ctx context.Context, in *CertificateCategoryReq, opts ...grpc.CallOption) (*CertificateCategoryResp, error)
		// CertificateCategoryList 证书类别列表
		CertificateCategoryList(ctx context.Context, in *CertificateCategoryListReq, opts ...grpc.CallOption) (*CertificateCategoryListResp, error)
		// CertificateCategoryUpdate 证书类别更新
		CertificateCategoryUpdate(ctx context.Context, in *CertificateCategoryUpdateReq, opts ...grpc.CallOption) (*CertificateCategoryUpdateResp, error)
		// CertificateCategoryDelete 证书类别删除
		CertificateCategoryDelete(ctx context.Context, in *CertificateCategoryDeleteReq, opts ...grpc.CallOption) (*CertificateCategoryDeleteResp, error)
	}

	defaultIdocService struct {
		cli zrpc.Client
	}
)

func NewIdocService(cli zrpc.Client) IdocService {
	return &defaultIdocService{
		cli: cli,
	}
}

// CertificateAdd 证书添加
func (m *defaultIdocService) CertificateAdd(ctx context.Context, in *CertificateAddReq, opts ...grpc.CallOption) (*CertificateAddResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateAdd(ctx, in, opts...)
}

// CertificateList 证书列表
func (m *defaultIdocService) CertificateList(ctx context.Context, in *CertificateListReq, opts ...grpc.CallOption) (*CertificateListResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateList(ctx, in, opts...)
}

// CertificateUpdate 证书更新
func (m *defaultIdocService) CertificateUpdate(ctx context.Context, in *CertificateUpdateReq, opts ...grpc.CallOption) (*CertificateUpdateResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateUpdate(ctx, in, opts...)
}

// CertificateDelete 证书删除
func (m *defaultIdocService) CertificateDelete(ctx context.Context, in *CertificateDeleteReq, opts ...grpc.CallOption) (*CertificateDeleteResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateDelete(ctx, in, opts...)
}

// CertificateCategoryAdd 证书类别增加
func (m *defaultIdocService) CertificateCategoryAdd(ctx context.Context, in *CertificateCategoryReq, opts ...grpc.CallOption) (*CertificateCategoryResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateCategoryAdd(ctx, in, opts...)
}

// CertificateCategoryList 证书类别列表
func (m *defaultIdocService) CertificateCategoryList(ctx context.Context, in *CertificateCategoryListReq, opts ...grpc.CallOption) (*CertificateCategoryListResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateCategoryList(ctx, in, opts...)
}

// CertificateCategoryUpdate 证书类别更新
func (m *defaultIdocService) CertificateCategoryUpdate(ctx context.Context, in *CertificateCategoryUpdateReq, opts ...grpc.CallOption) (*CertificateCategoryUpdateResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateCategoryUpdate(ctx, in, opts...)
}

// CertificateCategoryDelete 证书类别删除
func (m *defaultIdocService) CertificateCategoryDelete(ctx context.Context, in *CertificateCategoryDeleteReq, opts ...grpc.CallOption) (*CertificateCategoryDeleteResp, error) {
	client := idoc.NewIdocServiceClient(m.cli.Conn())
	return client.CertificateCategoryDelete(ctx, in, opts...)
}
