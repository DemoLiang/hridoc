// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc1
// source: idoc.proto

package idoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdocService_CertificateAdd_FullMethodName            = "/idoc.IdocService/CertificateAdd"
	IdocService_CertificateList_FullMethodName           = "/idoc.IdocService/CertificateList"
	IdocService_CertificateUpdate_FullMethodName         = "/idoc.IdocService/CertificateUpdate"
	IdocService_CertificateDelete_FullMethodName         = "/idoc.IdocService/CertificateDelete"
	IdocService_CertificateCategoryAdd_FullMethodName    = "/idoc.IdocService/CertificateCategoryAdd"
	IdocService_CertificateCategoryList_FullMethodName   = "/idoc.IdocService/CertificateCategoryList"
	IdocService_CertificateCategoryUpdate_FullMethodName = "/idoc.IdocService/CertificateCategoryUpdate"
	IdocService_CertificateCategoryDelete_FullMethodName = "/idoc.IdocService/CertificateCategoryDelete"
)

// IdocServiceClient is the client API for IdocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdocServiceClient interface {
	// CertificateAdd 证书添加
	CertificateAdd(ctx context.Context, in *CertificateAddReq, opts ...grpc.CallOption) (*CertificateAddResp, error)
	// CertificateList 证书列表
	CertificateList(ctx context.Context, in *CertificateListReq, opts ...grpc.CallOption) (*CertificateListResp, error)
	// CertificateUpdate 证书更新
	CertificateUpdate(ctx context.Context, in *CertificateUpdateReq, opts ...grpc.CallOption) (*CertificateUpdateResp, error)
	// CertificateDelete 证书删除
	CertificateDelete(ctx context.Context, in *CertificateDeleteReq, opts ...grpc.CallOption) (*CertificateDeleteResp, error)
	// CertificateCategoryAdd 证书类别增加
	CertificateCategoryAdd(ctx context.Context, in *CertificateCategoryReq, opts ...grpc.CallOption) (*CertificateCategoryResp, error)
	// CertificateCategoryList 证书类别列表
	CertificateCategoryList(ctx context.Context, in *CertificateCategoryListReq, opts ...grpc.CallOption) (*CertificateCategoryListResp, error)
	// CertificateCategoryUpdate 证书类别更新
	CertificateCategoryUpdate(ctx context.Context, in *CertificateCategoryUpdateReq, opts ...grpc.CallOption) (*CertificateCategoryUpdateResp, error)
	// CertificateCategoryDelete 证书类别删除
	CertificateCategoryDelete(ctx context.Context, in *CertificateCategoryDeleteReq, opts ...grpc.CallOption) (*CertificateCategoryDeleteResp, error)
}

type idocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdocServiceClient(cc grpc.ClientConnInterface) IdocServiceClient {
	return &idocServiceClient{cc}
}

func (c *idocServiceClient) CertificateAdd(ctx context.Context, in *CertificateAddReq, opts ...grpc.CallOption) (*CertificateAddResp, error) {
	out := new(CertificateAddResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idocServiceClient) CertificateList(ctx context.Context, in *CertificateListReq, opts ...grpc.CallOption) (*CertificateListResp, error) {
	out := new(CertificateListResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idocServiceClient) CertificateUpdate(ctx context.Context, in *CertificateUpdateReq, opts ...grpc.CallOption) (*CertificateUpdateResp, error) {
	out := new(CertificateUpdateResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idocServiceClient) CertificateDelete(ctx context.Context, in *CertificateDeleteReq, opts ...grpc.CallOption) (*CertificateDeleteResp, error) {
	out := new(CertificateDeleteResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idocServiceClient) CertificateCategoryAdd(ctx context.Context, in *CertificateCategoryReq, opts ...grpc.CallOption) (*CertificateCategoryResp, error) {
	out := new(CertificateCategoryResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateCategoryAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idocServiceClient) CertificateCategoryList(ctx context.Context, in *CertificateCategoryListReq, opts ...grpc.CallOption) (*CertificateCategoryListResp, error) {
	out := new(CertificateCategoryListResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idocServiceClient) CertificateCategoryUpdate(ctx context.Context, in *CertificateCategoryUpdateReq, opts ...grpc.CallOption) (*CertificateCategoryUpdateResp, error) {
	out := new(CertificateCategoryUpdateResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateCategoryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idocServiceClient) CertificateCategoryDelete(ctx context.Context, in *CertificateCategoryDeleteReq, opts ...grpc.CallOption) (*CertificateCategoryDeleteResp, error) {
	out := new(CertificateCategoryDeleteResp)
	err := c.cc.Invoke(ctx, IdocService_CertificateCategoryDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdocServiceServer is the server API for IdocService service.
// All implementations must embed UnimplementedIdocServiceServer
// for forward compatibility
type IdocServiceServer interface {
	// CertificateAdd 证书添加
	CertificateAdd(context.Context, *CertificateAddReq) (*CertificateAddResp, error)
	// CertificateList 证书列表
	CertificateList(context.Context, *CertificateListReq) (*CertificateListResp, error)
	// CertificateUpdate 证书更新
	CertificateUpdate(context.Context, *CertificateUpdateReq) (*CertificateUpdateResp, error)
	// CertificateDelete 证书删除
	CertificateDelete(context.Context, *CertificateDeleteReq) (*CertificateDeleteResp, error)
	// CertificateCategoryAdd 证书类别增加
	CertificateCategoryAdd(context.Context, *CertificateCategoryReq) (*CertificateCategoryResp, error)
	// CertificateCategoryList 证书类别列表
	CertificateCategoryList(context.Context, *CertificateCategoryListReq) (*CertificateCategoryListResp, error)
	// CertificateCategoryUpdate 证书类别更新
	CertificateCategoryUpdate(context.Context, *CertificateCategoryUpdateReq) (*CertificateCategoryUpdateResp, error)
	// CertificateCategoryDelete 证书类别删除
	CertificateCategoryDelete(context.Context, *CertificateCategoryDeleteReq) (*CertificateCategoryDeleteResp, error)
	mustEmbedUnimplementedIdocServiceServer()
}

// UnimplementedIdocServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdocServiceServer struct {
}

func (UnimplementedIdocServiceServer) CertificateAdd(context.Context, *CertificateAddReq) (*CertificateAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateAdd not implemented")
}
func (UnimplementedIdocServiceServer) CertificateList(context.Context, *CertificateListReq) (*CertificateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateList not implemented")
}
func (UnimplementedIdocServiceServer) CertificateUpdate(context.Context, *CertificateUpdateReq) (*CertificateUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateUpdate not implemented")
}
func (UnimplementedIdocServiceServer) CertificateDelete(context.Context, *CertificateDeleteReq) (*CertificateDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateDelete not implemented")
}
func (UnimplementedIdocServiceServer) CertificateCategoryAdd(context.Context, *CertificateCategoryReq) (*CertificateCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateCategoryAdd not implemented")
}
func (UnimplementedIdocServiceServer) CertificateCategoryList(context.Context, *CertificateCategoryListReq) (*CertificateCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateCategoryList not implemented")
}
func (UnimplementedIdocServiceServer) CertificateCategoryUpdate(context.Context, *CertificateCategoryUpdateReq) (*CertificateCategoryUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateCategoryUpdate not implemented")
}
func (UnimplementedIdocServiceServer) CertificateCategoryDelete(context.Context, *CertificateCategoryDeleteReq) (*CertificateCategoryDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateCategoryDelete not implemented")
}
func (UnimplementedIdocServiceServer) mustEmbedUnimplementedIdocServiceServer() {}

// UnsafeIdocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdocServiceServer will
// result in compilation errors.
type UnsafeIdocServiceServer interface {
	mustEmbedUnimplementedIdocServiceServer()
}

func RegisterIdocServiceServer(s grpc.ServiceRegistrar, srv IdocServiceServer) {
	s.RegisterService(&IdocService_ServiceDesc, srv)
}

func _IdocService_CertificateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateAdd(ctx, req.(*CertificateAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdocService_CertificateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateList(ctx, req.(*CertificateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdocService_CertificateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateUpdate(ctx, req.(*CertificateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdocService_CertificateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateDelete(ctx, req.(*CertificateDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdocService_CertificateCategoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateCategoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateCategoryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateCategoryAdd(ctx, req.(*CertificateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdocService_CertificateCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateCategoryList(ctx, req.(*CertificateCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdocService_CertificateCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateCategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateCategoryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateCategoryUpdate(ctx, req.(*CertificateCategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdocService_CertificateCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateCategoryDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdocServiceServer).CertificateCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdocService_CertificateCategoryDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdocServiceServer).CertificateCategoryDelete(ctx, req.(*CertificateCategoryDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdocService_ServiceDesc is the grpc.ServiceDesc for IdocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idoc.IdocService",
	HandlerType: (*IdocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CertificateAdd",
			Handler:    _IdocService_CertificateAdd_Handler,
		},
		{
			MethodName: "CertificateList",
			Handler:    _IdocService_CertificateList_Handler,
		},
		{
			MethodName: "CertificateUpdate",
			Handler:    _IdocService_CertificateUpdate_Handler,
		},
		{
			MethodName: "CertificateDelete",
			Handler:    _IdocService_CertificateDelete_Handler,
		},
		{
			MethodName: "CertificateCategoryAdd",
			Handler:    _IdocService_CertificateCategoryAdd_Handler,
		},
		{
			MethodName: "CertificateCategoryList",
			Handler:    _IdocService_CertificateCategoryList_Handler,
		},
		{
			MethodName: "CertificateCategoryUpdate",
			Handler:    _IdocService_CertificateCategoryUpdate_Handler,
		},
		{
			MethodName: "CertificateCategoryDelete",
			Handler:    _IdocService_CertificateCategoryDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idoc.proto",
}
