// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc1
// source: idoc.proto

package idoc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CertificateAddReq 证书添加请求
type CertificateAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     //证书名称
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`     //存储位置
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"` // 证书持有人
}

func (x *CertificateAddReq) Reset() {
	*x = CertificateAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAddReq) ProtoMessage() {}

func (x *CertificateAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAddReq.ProtoReflect.Descriptor instead.
func (*CertificateAddReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateAddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateAddReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CertificateAddReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CertificateAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *CertificateAddResp) Reset() {
	*x = CertificateAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAddResp) ProtoMessage() {}

func (x *CertificateAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAddResp.ProtoReflect.Descriptor instead.
func (*CertificateAddResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{1}
}

func (x *CertificateAddResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type CertificateListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current  int64 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *CertificateListReq) Reset() {
	*x = CertificateListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateListReq) ProtoMessage() {}

func (x *CertificateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateListReq.ProtoReflect.Descriptor instead.
func (*CertificateListReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{2}
}

func (x *CertificateListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *CertificateListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CertificateListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     //证书名称
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`     //存储位置
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"` // 证书持有人
	Id     string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`         //证书ID
}

func (x *CertificateListData) Reset() {
	*x = CertificateListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateListData) ProtoMessage() {}

func (x *CertificateListData) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateListData.ProtoReflect.Descriptor instead.
func (*CertificateListData) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{3}
}

func (x *CertificateListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateListData) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CertificateListData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CertificateListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CertificateListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CertificateListResp) Reset() {
	*x = CertificateListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateListResp) ProtoMessage() {}

func (x *CertificateListResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateListResp.ProtoReflect.Descriptor instead.
func (*CertificateListResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{4}
}

func (x *CertificateListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CertificateListResp) GetList() []*CertificateListData {
	if x != nil {
		return x.List
	}
	return nil
}

type CertificateUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     //证书名称
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`     //存储位置
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"` // 证书持有人
	Id     string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`         //证书ID
}

func (x *CertificateUpdateReq) Reset() {
	*x = CertificateUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateUpdateReq) ProtoMessage() {}

func (x *CertificateUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateUpdateReq.ProtoReflect.Descriptor instead.
func (*CertificateUpdateReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{5}
}

func (x *CertificateUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateUpdateReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CertificateUpdateReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CertificateUpdateReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *CertificateUpdateResp) Reset() {
	*x = CertificateUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateUpdateResp) ProtoMessage() {}

func (x *CertificateUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateUpdateResp.ProtoReflect.Descriptor instead.
func (*CertificateUpdateResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{6}
}

func (x *CertificateUpdateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type CertificateDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //证书ID
}

func (x *CertificateDeleteReq) Reset() {
	*x = CertificateDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateDeleteReq) ProtoMessage() {}

func (x *CertificateDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateDeleteReq.ProtoReflect.Descriptor instead.
func (*CertificateDeleteReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{7}
}

func (x *CertificateDeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *CertificateDeleteResp) Reset() {
	*x = CertificateDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateDeleteResp) ProtoMessage() {}

func (x *CertificateDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateDeleteResp.ProtoReflect.Descriptor instead.
func (*CertificateDeleteResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{8}
}

func (x *CertificateDeleteResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// CertificateCategoryAddReq 证书类别添加请求
type CertificateCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` //证书类别名称
}

func (x *CertificateCategoryReq) Reset() {
	*x = CertificateCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryReq) ProtoMessage() {}

func (x *CertificateCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryReq.ProtoReflect.Descriptor instead.
func (*CertificateCategoryReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{9}
}

func (x *CertificateCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CertificateCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *CertificateCategoryResp) Reset() {
	*x = CertificateCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryResp) ProtoMessage() {}

func (x *CertificateCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryResp.ProtoReflect.Descriptor instead.
func (*CertificateCategoryResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{10}
}

func (x *CertificateCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type CertificateCategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current  int64 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *CertificateCategoryListReq) Reset() {
	*x = CertificateCategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryListReq) ProtoMessage() {}

func (x *CertificateCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryListReq.ProtoReflect.Descriptor instead.
func (*CertificateCategoryListReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{11}
}

func (x *CertificateCategoryListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *CertificateCategoryListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CertificateCategoryListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` //证书类别名称
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`     //证书类别ID
}

func (x *CertificateCategoryListData) Reset() {
	*x = CertificateCategoryListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryListData) ProtoMessage() {}

func (x *CertificateCategoryListData) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryListData.ProtoReflect.Descriptor instead.
func (*CertificateCategoryListData) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{12}
}

func (x *CertificateCategoryListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateCategoryListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateCategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CertificateCategoryListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CertificateCategoryListResp) Reset() {
	*x = CertificateCategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryListResp) ProtoMessage() {}

func (x *CertificateCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryListResp.ProtoReflect.Descriptor instead.
func (*CertificateCategoryListResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{13}
}

func (x *CertificateCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CertificateCategoryListResp) GetList() []*CertificateCategoryListData {
	if x != nil {
		return x.List
	}
	return nil
}

type CertificateCategoryUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` //证书类别名称
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`     //证书类别ID
}

func (x *CertificateCategoryUpdateReq) Reset() {
	*x = CertificateCategoryUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryUpdateReq) ProtoMessage() {}

func (x *CertificateCategoryUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryUpdateReq.ProtoReflect.Descriptor instead.
func (*CertificateCategoryUpdateReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{14}
}

func (x *CertificateCategoryUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateCategoryUpdateReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateCategoryUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *CertificateCategoryUpdateResp) Reset() {
	*x = CertificateCategoryUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryUpdateResp) ProtoMessage() {}

func (x *CertificateCategoryUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryUpdateResp.ProtoReflect.Descriptor instead.
func (*CertificateCategoryUpdateResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{15}
}

func (x *CertificateCategoryUpdateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type CertificateCategoryDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //证书类别ID
}

func (x *CertificateCategoryDeleteReq) Reset() {
	*x = CertificateCategoryDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryDeleteReq) ProtoMessage() {}

func (x *CertificateCategoryDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryDeleteReq.ProtoReflect.Descriptor instead.
func (*CertificateCategoryDeleteReq) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{16}
}

func (x *CertificateCategoryDeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateCategoryDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *CertificateCategoryDeleteResp) Reset() {
	*x = CertificateCategoryDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idoc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateCategoryDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateCategoryDeleteResp) ProtoMessage() {}

func (x *CertificateCategoryDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_idoc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateCategoryDeleteResp.ProtoReflect.Descriptor instead.
func (*CertificateCategoryDeleteResp) Descriptor() ([]byte, []int) {
	return file_idoc_proto_rawDescGZIP(), []int{17}
}

func (x *CertificateCategoryDeleteResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

var File_idoc_proto protoreflect.FileDescriptor

var file_idoc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x69, 0x64,
	0x6f, 0x63, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x65, 0x0a,
	0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x66, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x26, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a,
	0x15, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x52, 0x0a, 0x1a, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x1b, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a,
	0x0a, 0x1b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x1c, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33,
	0x0a, 0x1d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x1d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x32, 0xb9, 0x05, 0x0a, 0x0b, 0x49, 0x64, 0x6f,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x17, 0x2e, 0x69, 0x64, 0x6f,
	0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a,
	0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x69, 0x64, 0x6f,
	0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x69, 0x64, 0x6f,
	0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x55, 0x0a, 0x16, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x2e, 0x69, 0x64,
	0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x69, 0x64, 0x6f, 0x63,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x17, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x64, 0x6f, 0x63,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64,
	0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x69, 0x64,
	0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x69, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x69, 0x64, 0x6f, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idoc_proto_rawDescOnce sync.Once
	file_idoc_proto_rawDescData = file_idoc_proto_rawDesc
)

func file_idoc_proto_rawDescGZIP() []byte {
	file_idoc_proto_rawDescOnce.Do(func() {
		file_idoc_proto_rawDescData = protoimpl.X.CompressGZIP(file_idoc_proto_rawDescData)
	})
	return file_idoc_proto_rawDescData
}

var file_idoc_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_idoc_proto_goTypes = []interface{}{
	(*CertificateAddReq)(nil),             // 0: idoc.CertificateAddReq
	(*CertificateAddResp)(nil),            // 1: idoc.CertificateAddResp
	(*CertificateListReq)(nil),            // 2: idoc.CertificateListReq
	(*CertificateListData)(nil),           // 3: idoc.CertificateListData
	(*CertificateListResp)(nil),           // 4: idoc.CertificateListResp
	(*CertificateUpdateReq)(nil),          // 5: idoc.CertificateUpdateReq
	(*CertificateUpdateResp)(nil),         // 6: idoc.CertificateUpdateResp
	(*CertificateDeleteReq)(nil),          // 7: idoc.CertificateDeleteReq
	(*CertificateDeleteResp)(nil),         // 8: idoc.CertificateDeleteResp
	(*CertificateCategoryReq)(nil),        // 9: idoc.CertificateCategoryReq
	(*CertificateCategoryResp)(nil),       // 10: idoc.CertificateCategoryResp
	(*CertificateCategoryListReq)(nil),    // 11: idoc.CertificateCategoryListReq
	(*CertificateCategoryListData)(nil),   // 12: idoc.CertificateCategoryListData
	(*CertificateCategoryListResp)(nil),   // 13: idoc.CertificateCategoryListResp
	(*CertificateCategoryUpdateReq)(nil),  // 14: idoc.CertificateCategoryUpdateReq
	(*CertificateCategoryUpdateResp)(nil), // 15: idoc.CertificateCategoryUpdateResp
	(*CertificateCategoryDeleteReq)(nil),  // 16: idoc.CertificateCategoryDeleteReq
	(*CertificateCategoryDeleteResp)(nil), // 17: idoc.CertificateCategoryDeleteResp
}
var file_idoc_proto_depIdxs = []int32{
	3,  // 0: idoc.CertificateListResp.list:type_name -> idoc.CertificateListData
	12, // 1: idoc.CertificateCategoryListResp.list:type_name -> idoc.CertificateCategoryListData
	0,  // 2: idoc.IdocService.CertificateAdd:input_type -> idoc.CertificateAddReq
	2,  // 3: idoc.IdocService.CertificateList:input_type -> idoc.CertificateListReq
	5,  // 4: idoc.IdocService.CertificateUpdate:input_type -> idoc.CertificateUpdateReq
	7,  // 5: idoc.IdocService.CertificateDelete:input_type -> idoc.CertificateDeleteReq
	9,  // 6: idoc.IdocService.CertificateCategoryAdd:input_type -> idoc.CertificateCategoryReq
	11, // 7: idoc.IdocService.CertificateCategoryList:input_type -> idoc.CertificateCategoryListReq
	14, // 8: idoc.IdocService.CertificateCategoryUpdate:input_type -> idoc.CertificateCategoryUpdateReq
	16, // 9: idoc.IdocService.CertificateCategoryDelete:input_type -> idoc.CertificateCategoryDeleteReq
	1,  // 10: idoc.IdocService.CertificateAdd:output_type -> idoc.CertificateAddResp
	4,  // 11: idoc.IdocService.CertificateList:output_type -> idoc.CertificateListResp
	6,  // 12: idoc.IdocService.CertificateUpdate:output_type -> idoc.CertificateUpdateResp
	8,  // 13: idoc.IdocService.CertificateDelete:output_type -> idoc.CertificateDeleteResp
	10, // 14: idoc.IdocService.CertificateCategoryAdd:output_type -> idoc.CertificateCategoryResp
	13, // 15: idoc.IdocService.CertificateCategoryList:output_type -> idoc.CertificateCategoryListResp
	15, // 16: idoc.IdocService.CertificateCategoryUpdate:output_type -> idoc.CertificateCategoryUpdateResp
	17, // 17: idoc.IdocService.CertificateCategoryDelete:output_type -> idoc.CertificateCategoryDeleteResp
	10, // [10:18] is the sub-list for method output_type
	2,  // [2:10] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_idoc_proto_init() }
func file_idoc_proto_init() {
	if File_idoc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idoc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idoc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateCategoryDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idoc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idoc_proto_goTypes,
		DependencyIndexes: file_idoc_proto_depIdxs,
		MessageInfos:      file_idoc_proto_msgTypes,
	}.Build()
	File_idoc_proto = out.File
	file_idoc_proto_rawDesc = nil
	file_idoc_proto_goTypes = nil
	file_idoc_proto_depIdxs = nil
}
